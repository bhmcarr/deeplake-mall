// main global script file

// Globals from GUIscript
import int ActionLabelColorHighlighted;
import char key_l_yes, key_u_yes, key_l_no, key_u_no; 
import int action_l_keycode[A_COUNT_]; 
import int action_u_keycode[A_COUNT_];
import int GStopsaveitem;
import int listBoxGap;
import int lang;
import InventoryItem*ItemGiven;

// Door IDs in use are:
///////////////////////////////////////////////
// ID 20 - Sample Door in Room 1
///////////////////////////////////////////////

// =======================================================================================
function game_start() {

  String tr_lang;
  // --- translate GUI action buttons ---
  tr_lang = GetTranslation("GUI_LANGUAGE");
  tr_lang = tr_lang.LowerCase();
  
  if (tr_lang == "de") {
    lang = eLangDE;
  }
  else if (tr_lang =="es") {
    lang = eLangES;
  }
  else if (tr_lang =="fr") {
    lang = eLangFR;
  }  
  else if (tr_lang =="en") {
    lang = eLangEN;
  }
  else if (tr_lang =="it") {
    lang = eLangIT;
  }     
  InitGuiLanguage();
  AdjustGUIText();
  // --- Set default Door strings (Look, locked and wrong item)
  set_door_strings("The door looks solid.","It is locked.","I can't unlock it with that.","I have to close it first.","Now it's unlocked.","The door is locked again.");
  // --- initialize game settings ---
  SetDefaultAction(eMA_WalkTo);    
  set_double_click_speed(GetGameSpeed()/4);
  
  // --- set the pixel gap for listbox items according to the screen res
  if (System.ScreenWidth<640) listBoxGap = 2; 
  else listBoxGap = 4;
  
}

function on_mouse_click(MouseButton button) {
}

function repeatedly_execute() {
}

function on_key_press(eKeyCode keycode) {
  // called when a key is pressed. keycode holds the key's ASCII code
  
  // --- PAUSE-GUI ---
  if (keycode == eKeySpace)
  {
    // SPACEBAR
    if (!IsGamePaused()) {
      PauseGame();
      AdjustGUIText();
      gPaused.Visible=true;
    }
    else {
      gPaused.Visible=false;
      UnPauseGame();
      SetAction(eMA_Default);
      ActionLine.TextColor=ActionLabelColorHighlighted;      
      CheckDefaultAction();
      UpdateActionBar();
    }
  }
  // --- RESTART-GUI ---
  else if (gRestart.Visible) {

    // if exit gui is on
    if (keycode==key_u_no || keycode == key_l_no) gRestart.Visible=false; // if N is pressed continue
    if (keycode==key_u_yes || keycode == key_l_yes) RestartGame(); // if Y is pressed restart game
  }
  // --- QUITGAME-GUI ---
  if (gConfirmexit.Visible) {
    // if exit gui is on
    if (keycode==key_u_no || keycode==key_l_no) gConfirmexit.Visible=false; // if N is pressed continue
    if (keycode==key_u_yes || keycode==key_l_yes) QuitGame(0);       // if Y is pressed quit game
  }
  
  // Translate GUIs on keypress
  if (keycode == eKeyF5 || keycode == eKeyF8 || keycode == eKeyCtrlC) AdjustGUIText();
  
  // 
  if (keycode == eKeyF5) gOptions.Visible=true;            // F5 - OPTIONS
  if (keycode == eKeyF8) gRestart.Visible=true;            // F8 - RESTART
  if (keycode == eKeyCtrlC) gConfirmexit.Visible=true;          // Ctrl-C - QUIT
  if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug (0, 0);                     // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug (1, 0);                     // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug (2, 0);                     // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug (3, 0);                     // Ctrl-X, teleport to room
  
  // --- triggering actions by the keys:---
  
  if (!IsGamePaused()) {
    int act_i=0;
    while (act_i<A_COUNT_) {
      if (keycode == action_l_keycode[act_i] || keycode==action_u_keycode[act_i]) {
        SetAction(act_i);
        act_i=A_COUNT_;
      }
      else {
        act_i++;
      }
    }
  }
}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom)
  if (event==eEventRestoreGame) {
    AdjustLanguage();
  }
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame)
    player.PlaceOnWalkableArea();
}


////////////////////////////////////////////////////////////////////////////////////
// GUI handling
////////////////////////////////////////////////////////////////////////////////////

function Action_Click(GUIControl *control, MouseButton button) {
  Action tempbutton = getButtonAction(control.ID);
  SetAction(tempbutton);
}

function btnMainOpt_OnClick(GUIControl *control, MouseButton button)
{
  AdjustGUIText();
  if (!gRestart.Visible && !gConfirmexit.Visible)
  gOptions.Visible=true;
}

function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control==InvUp) MainInv.ScrollUp();
  else MainInv.ScrollDown();  
}

function Options_Click(GUIControl *control, MouseButton button) {
	if (control==OptionsSave)	{
		//save game
		gOptions.Visible=false;
		GetLucasSavegameListBox(SaveListBox);
		gSave.Visible=true;
	}
	if (control==OptionsLoad)	{
		//load game
		gOptions.Visible=false;
		GetLucasSavegameListBox(RestoreListBox);
    RestoreListBox.TopItem=0;
		gRestore.Visible=true;
	}
	if (control==OptionsPlay)	{
		// continue playing
		gOptions.Visible=false;
	}
	if (control==OptionsQuit)	{
		// exit??
    gOptions.Visible=false;
		gConfirmexit.Visible=true;
	}
}

function OptionsRestart_OnClick(GUIControl *control, MouseButton button)
{
    gOptions.Visible=false;
		gRestart.Visible=true;
}

function OptionsDefault_OnClick(GUIControl *control, MouseButton button)
{
  OptionsSldMusic.Value = 80;
  OptionsSldSound.Value = 90;
  OptionsSldSpeed.Value = 40;
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeMusic, OptionsSldMusic.Value, eVolExistingAndFuture);  
  Game.SetAudioTypeVolume(eAudioTypeSound, OptionsSldSound.Value, eVolExistingAndFuture); 
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, OptionsSldSound.Value, eVolExistingAndFuture); 
#endif

#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetSoundVolume(OptionsSldSound.Value);
  SetMusicVolume(OptionsSldMusic.Value);
#endif
  SetGameSpeed(OptionsSldSpeed.Value);
}

function OptionsSldMusic_OnChange(GUIControl *control)
{
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeMusic, OptionsSldMusic.Value, eVolExistingAndFuture);
#endif
#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetMusicVolume(OptionsSldMusic.Value);
#endif

}
function OptionsSldSound_OnChange(GUIControl *control)
{
#ifdef USE_OBJECT_ORIENTED_AUDIO
  Game.SetAudioTypeVolume(eAudioTypeSound, OptionsSldSound.Value, eVolExistingAndFuture); 
  Game.SetAudioTypeVolume(eAudioTypeAmbientSound, OptionsSldSound.Value, eVolExistingAndFuture); 
#endif
#ifndef USE_OBJECT_ORIENTED_AUDIO
  SetSoundVolume(OptionsSldSound.Value);
#endif  

}


function OptionsSldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(OptionsSldSpeed.Value);
}

function Restore_Click(GUIControl *control, MouseButton button) {
  if (control==RestoreCancel) gRestore.Visible=false;
  if (control==RestoreScrollUp)	{
  	if (GStopsaveitem < 5) GStopsaveitem = 0;
  	else GStopsaveitem -= 5;
  	RestoreListBox.TopItem=GStopsaveitem;
  }
  if (control==RestoreScrollDown) {
  if (GStopsaveitem < 90) {
      GStopsaveitem += 5;
      RestoreListBox.TopItem=GStopsaveitem;
    }
  }
}

function RestoreListBox_Click(GUIControl *control) {
  int index = RestoreListBox.SelectedIndex;
  String buffer=Game.GetSaveSlotDescription(index+100);
  if (buffer!=null) {
    gRestore.Visible=false;
    RestoreGameSlot(index + 100);
  } 
}

function Save_Click(GUIControl *control, MouseButton button) {
	int index = SaveListBox.SelectedIndex;
	String buffer;
	if (control==SaveCancel) {
		gSave.Visible=false;
		gSavetextbox.Visible=false;
	}
	if (control==SaveOK && index >= 0) {
		buffer=SaveTextBox.Text;
		gSave.Visible=false;
		gSavetextbox.Visible=false;
		SaveGameSlot (index + 100, buffer);
	}
	if (control==SaveScrollUp) {
		gSavetextbox.Visible=false;
		SaveListBox.SelectedIndex=-1;
		if (GStopsaveitem < 5) GStopsaveitem = 0;
		else GStopsaveitem -= 5;
		SaveListBox.TopItem=GStopsaveitem;
	}
	if (control==SaveScrollDown && GStopsaveitem < 90) {
		gSavetextbox.Visible=false;
		SaveListBox.SelectedIndex=-1;
		GStopsaveitem += 5;
		SaveListBox.TopItem=GStopsaveitem;
	}
}

function SaveListBox_Click(GUIControl *control) {
  int saveBox_ypos;
  int saveBox_xpos;
 	int index = SaveListBox.SelectedIndex;

	String buffer=String.Format("%d.", index+1);
	SaveLabel.Text=buffer;
	buffer=Game.GetSaveSlotDescription(index+100);
	if (buffer==null) buffer="";
	SaveTextBox.Text=buffer;
	
  saveBox_ypos = gSave.Y + SaveListBox.Y + ((index - GStopsaveitem) * (GetTextHeight(SaveLabel.Text, SaveLabel.Font, SaveLabel.Width)+listBoxGap));
  saveBox_xpos = GetTextWidth(SaveLabel.Text, SaveLabel.Font);
  SaveTextBox.SetPosition(saveBox_xpos, 0);
  
  gSavetextbox.SetPosition(gSave.X + SaveListBox.X, saveBox_ypos);
	gSavetextbox.Visible=true;
}

function SaveTextBox_Click(GUI *theGui, MouseButton button) {
  if (mouse.IsButtonDown(eMouseRight)) gSavetextbox.Visible=false;  
}

// dialog "run-script" stuff gets directed here.
function dialog_request(int parameter) {
  if (parameter == 1){
    player.SetProperty("knowsDoogle", 1);
  }
}

//////////////////////////////////////////////////////////////////////////
///////////////////Custom FUNCTIONS//////////////////////////////////
//////////////////////////////////////////////////////////////////////////

/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {

  // TALK TO (characters only)
  if (UsedAction(eGA_TalkTo)) {
    Unhandled();
  }
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // OPEN
  else if(UsedAction(eGA_Open)) {
    Unhandled();
  }  
  // CLOSE
  else if(UsedAction(eGA_Close)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  } 
  // PICKUP
  else if(UsedAction(eGA_PickUp)) {
    Unhandled();
  }
  // GIVE TO (characters only)
  else if(UsedAction(eGA_GiveTo)) {
    Unhandled();
  }  
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if(UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if(UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if(UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if(UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if(UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/

function cBill_Talk()
{
  if (cBill.View == 25){
    cBill.Say("Hmphh... *snore*");
  }
  else {
    billDialog1.Start();
  }
}

function cChet_Talk()
{
  dChetDialog1.Start();
}

function cRose_Talk()
{
  dRoseDialog1.Start();
  cTrenton.FaceDirection(eDirectionRight);
}

function iKeyMadeWithLove_Look()
{
  player.Say("They say, 'Made With Love employees only!'");
}

function cYvonne_Talk()
{
  dYvonne1.Start();
  cTrenton.FaceDirection(eDirectionRight);
}


function cBill_UseInv()
{
  if (player.ActiveInventory == iDecafCoffee){
    cBill.Say("Thanks kid.. I really...");
    cBill.Say("I really needed a...");
    cBill.Say("*yaaawn*");
    cBill.ChangeView(25);
    player.LoseInventory(iDecafCoffee);
  }
}

function cChet_UseInv()
{
  if (player.ActiveInventory == iDecafCoffee){
    cChet.Say("Uh.. bro.. I don't drink that stuff.");
    player.Say("Oh..");
  }
}

function cAmrita_Talk()
{
  player.Walk(56, 128, eBlock);
  player.FaceDirection(eDirectionDownRight);
  dAmrita1.Start();
}

function cTravis_Talk()
{
  player.Walk(163, 129, eBlock);
  player.FaceDirection(eDirectionDownRight);
  dTravis1.Start();
}

function cMahlat_Talk()
{
  player.Walk(141, 149, eBlock);
  player.FaceCharacter(cMahlat, eBlock);
  dMahlat1.Start();
}

function cTrenton_UseInv()
{
  if(player.ActiveInventory == iShirt){
    if (player.Room == 8){
      cTrenton.ChangeView(41);
      cTrenton.SetProperty("wearingUglyShirt", 1);
    }
    else {
      player.Say("I can't wear this while I'm on the clock!");
    }
  }
}

function cMahlat_AnyClick()
{
  if (cTrenton.GetProperty("wearingUglyShirt") == true){
    cMahlat.ChangeView(45);
    cMahlat.Say("Oh.. it's hideous.");
    cMahlat.Say("It's... it's dreadful!");

    //oTeleport.Animate(0, 3, eOnce, eBlock);
  }
}

function iShirt_Look()
{
  player.Say("Bill doesn't know what the heck he's talking about.");
}

function cSavitri_Talk()
{
  dSavitri1.Start();
}

function cSavitri_UseInv()
{ 
  // player hands over the doll to Savitri
  if ( player.ActiveInventory == iDoll){
    player.Walk(246, 146, eBlock);
    dSavitri2.Start();
  }
}
